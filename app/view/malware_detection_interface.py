# coding:utf-8
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtWidgets import QVBoxLayout, QButtonGroup, QFrame, QGridLayout, QLabel, QSizePolicy, QFileDialog, QApplication
from PyQt5.QtGui import QFont
from qfluentwidgets import (StrongBodyLabel, Action, DropDownPushButton, DropDownToolButton, PushButton, FluentIcon, IconWidget, isDarkTheme, Theme)

from .gallery_interface import GalleryInterface
from ..common.translator import Translator
import ember
import lightgbm as lgb
import os


class MalwareDetectionInterface(GalleryInterface):
    """ Malware Detection interface """

    def __init__(self, parent=None):
        translator = Translator()
        super().__init__(
            title=translator.malDetec,
            subtitle='Malware Detection',
            parent=parent
        )
        self.setObjectName('MalwareDetectionInterface')
        
        self.titleLabel = StrongBodyLabel('选择程序文件上传，检测软件的安全性。', self)
        self.vBoxLayout.addWidget(self.titleLabel, 0, Qt.AlignTop)
        self.desLabel = StrongBodyLabel('输出为0~1的分数，越接近0则为良性软件的可能性越大，越接近1则为恶意软件的可能性越大。', self)
        self.vBoxLayout.addWidget(self.desLabel, 0, Qt.AlignTop)

        self.card = QFrame(self)
        self.card.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.card.setFixedHeight(200)
        self.vBoxLayout.addWidget(self.card)

        self.card_layout = QVBoxLayout(self.card)

        self.result = StrongBodyLabel(self.card)
        self.result.setText('暂无检测结果。')
        self.card_layout.addWidget(self.result, 0, Qt.AlignHCenter)

        self.resLabel = QLabel(self.card)
        self.resLabel.setFont(QFont('Microsoft YaHei', 15, QFont.DemiBold))
        self.card_layout.addWidget(self.resLabel, 0, Qt.AlignHCenter)

        self.file_button = PushButton(self.tr('选择文件'))
        self.file_button.clicked.connect(self.openFileDialog)
        self.file_button.setFixedSize(100, 35)
        self.vBoxLayout.addWidget(self.file_button, 0, Qt.AlignHCenter)


    def openFileDialog(self):
        filename, _ = QFileDialog.getOpenFileName(self, '选择文件', '', 'Executable Files (*.exe);;Dynamic Link Library (*.dll);;Font Files (*.fon)')
        if filename:
            self.classify_binaries(filename)


    def classify_binaries(self, filename):
        if not os.path.exists(filename):
            print("{} does not exist".format(filename))

        self.result.setText('正在检测文件，请稍等...')

        lgbm_model = lgb.Booster(model_file='./app/resource/model.txt')
        file_data = open(filename, "rb").read()
        score = ember.predict_sample(lgbm_model, file_data) 
        # 大于0.8，为一级；小于0.8大于0.2，为二级；小于0.2，为三级
        level = '三级' if score < 0.2 else '二级' if score < 0.8 else '一级'

        self.result.setText('{}文件的安全性分数为：{}'.format(os.path.basename(filename), "{:.8f}".format(score)))
        self.resLabel.setText('安全等级：{}'.format(level))
        self.resLabel.setStyleSheet('color: {}'.format('red' if level == '一级' else 'yellow' if level == '二级' else 'green'))
        




